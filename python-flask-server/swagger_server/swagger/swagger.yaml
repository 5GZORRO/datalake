---
swagger: "2.0"
info:
  description: "This is a simple server to support 5gzorro data lake operations."
  version: "1.0.0"
  title: "Data Lake API"
  contact:
    email: "meth@il.ibm.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/datalake/v1"
tags:
- name: "user"
  description: "Register/unregister users"
- name: "pipeline"
  description: "Operations on pipelines"
schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Register a new user"
      description: ""
      operationId: "register_user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Parameters to register User that is connecting to the services\
          \ of the Data Lake"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserResources"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
    delete:
      tags:
      - "user"
      summary: "Unregister a user"
      description: ""
      operationId: "unregister_user"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Parameters to unregister User from the Data Lake"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "204":
          description: "User unregistered successfully"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "User not found"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/all:
    get:
      tags:
      - "user"
      summary: "List all User IDs"
      description: ""
      operationId: "list_users"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
        "400":
          description: "Bad Request"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /pipeline:
    get:
      tags:
      - "pipeline"
      summary: "Return details of specified pipeline"
      description: ""
      operationId: "get_pipeline"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Parameters to get a pipeline"
        required: true
        schema:
          $ref: "#/definitions/GetPipeline"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PipelineInfo"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Pipeline not found"
      x-swagger-router-controller: "swagger_server.controllers.pipeline_controller"
    post:
      tags:
      - "pipeline"
      summary: "Register a new pipeline"
      description: ""
      operationId: "create_pipeline"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Parameters to register pipeline"
        required: true
        schema:
          $ref: "#/definitions/CreatePipeline"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PipelineMetadata"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
      x-swagger-router-controller: "swagger_server.controllers.pipeline_controller"
    delete:
      tags:
      - "pipeline"
      summary: "Delete a pipeline"
      description: ""
      operationId: "delete_pipeline"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Parameters to delete a pipeline"
        required: true
        schema:
          $ref: "#/definitions/GetPipeline"
      responses:
        "204":
          description: "Pipeline deleted successfully"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthorized"
        "404":
          description: "Pipeline not found"
      x-swagger-router-controller: "swagger_server.controllers.pipeline_controller"
  /pipeline/all:
    get:
      tags:
      - "pipeline"
      summary: "List all of the User's pipelines"
      description: ""
      operationId: "list_pipelines"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PipelineInfo"
        "400":
          description: "Bad Request"
      x-swagger-router-controller: "swagger_server.controllers.pipeline_controller"
definitions:
  User:
    type: "object"
    properties:
      userId:
        type: "string"
      authToken:
        type: "string"
    xml:
      name: "User"
    example:
      authToken: "authToken"
      userId: "userId"
  UserResources:
    type: "object"
    properties:
      nameSpace:
        type: "string"
      availableResources:
        type: "object"
        properties: {}
    xml:
      name: "UserResources"
    example:
      nameSpace: "nameSpace"
      availableResources: "{}"
  CreatePipeline:
    type: "object"
    properties:
      userInfo:
        $ref: "#/definitions/User"
      pipelineDefinition:
        type: "object"
        properties: {}
    xml:
      name: "CreatePipeline"
    example:
      userInfo:
        authToken: "authToken"
        userId: "userId"
      pipelineDefinition: "{}"
  GetPipeline:
    type: "object"
    properties:
      userInfo:
        $ref: "#/definitions/User"
      pipelineId:
        type: "string"
    xml:
      name: "GetPipeline"
    example:
      userInfo:
        authToken: "authToken"
        userId: "userId"
      pipelineId: "pipelineId"
  PipelineMetadata:
    type: "object"
    properties:
      pipelineId:
        type: "string"
      inputTopic:
        type: "string"
      outputTopic:
        type: "string"
    xml:
      name: "PipelineMetadata"
    example:
      outputTopic: "outputTopic"
      inputTopic: "inputTopic"
      pipelineId: "pipelineId"
  PipelineInfo:
    type: "object"
    properties:
      pipelineMetadata:
        $ref: "#/definitions/PipelineMetadata"
      pipelineDefinition:
        type: "object"
        properties: {}
    xml:
      name: "PipelineInfo"
    example:
      pipelineMetadata:
        outputTopic: "outputTopic"
        inputTopic: "inputTopic"
        pipelineId: "pipelineId"
      pipelineDefinition: "{}"
