# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UserResources(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name_space: str=None, available_resources: object=None):  # noqa: E501
        """UserResources - a model defined in Swagger

        :param name_space: The name_space of this UserResources.  # noqa: E501
        :type name_space: str
        :param available_resources: The available_resources of this UserResources.  # noqa: E501
        :type available_resources: object
        """
        self.swagger_types = {
            'name_space': str,
            'available_resources': object
        }

        self.attribute_map = {
            'name_space': 'nameSpace',
            'available_resources': 'availableResources'
        }

        self._name_space = name_space
        self._available_resources = available_resources

    @classmethod
    def from_dict(cls, dikt) -> 'UserResources':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserResources of this UserResources.  # noqa: E501
        :rtype: UserResources
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name_space(self) -> str:
        """Gets the name_space of this UserResources.


        :return: The name_space of this UserResources.
        :rtype: str
        """
        return self._name_space

    @name_space.setter
    def name_space(self, name_space: str):
        """Sets the name_space of this UserResources.


        :param name_space: The name_space of this UserResources.
        :type name_space: str
        """

        self._name_space = name_space

    @property
    def available_resources(self) -> object:
        """Gets the available_resources of this UserResources.


        :return: The available_resources of this UserResources.
        :rtype: object
        """
        return self._available_resources

    @available_resources.setter
    def available_resources(self, available_resources: object):
        """Sets the available_resources of this UserResources.


        :param available_resources: The available_resources of this UserResources.
        :type available_resources: object
        """

        self._available_resources = available_resources
